function brisk()
    close all;
    %% 1. Ordner mit Bildern wählen
    imageFolder = uigetdir(pwd, 'Wähle Ordner mit Satellitenbildern aus');
    if imageFolder == 0
        disp('Kein Ordner gewählt. Abbruch.');
        return;
    end

    %% 2. Bilder laden und sortieren
    imageFiles = dir(fullfile(imageFolder, '*.jpg'));
    if isempty(imageFiles)
        imageFiles = dir(fullfile(imageFolder, '*.png'));
    end
    if length(imageFiles) < 2
        error('Mindestens zwei Bilder erforderlich.');
    end
    imageFiles = sort_nat({imageFiles.name});

    %% 3. Referenzbild vorbereiten
    refImg = imread(fullfile(imageFolder, imageFiles{1}));
    refGray = preprocessImage(refImg);
    refSize = size(refGray);

    % Kumulierte Differenzinitialisierung
    cumulativeDiff = zeros(refSize);
    totalMask = true(refSize);

    %% 4. Schleife über alle weiteren Bilder
    skippedImages = {};

    for i = 2:length(imageFiles)
        img = imread(fullfile(imageFolder, imageFiles{i}));
        gray = preprocessImage(img);

        % Registrierung
        [registered, validMask] = registerImages(refGray, gray);

        if isempty(registered)
            skippedImages{end+1} = imageFiles{i};
            continue;
        end

        %% DEBUG: Registrierte Bilder anzeigen
        figure('Name', ['Registriertes Bild: ', imageFiles{i}], 'NumberTitle', 'off');
        subplot(1,3,1); imshow(gray); title('Original (aktuell)');
        subplot(1,3,2); imshow(registered); title('Registriert (ausgerichtet)');
        subplot(1,3,3);
        imshowpair(refGray, registered);
        title('Überlagerung mit Referenz');

        % Differenzbild berechnen
        diffImage = imabsdiff(refGray, registered);
        diffImage(~validMask) = 0;

        % Akkumulation
        cumulativeDiff = cumulativeDiff + diffImage;
        totalMask = totalMask & validMask;
    end

    if ~isempty(skippedImages)
        disp('Folgende Bilder konnten nicht registriert werden und wurden übersprungen:');
        disp(skippedImages');
    end

    %% 5. Visualisierung kumulierter Differenz
    cumulativeDiff(~totalMask) = 0;
    visualizeDifferenceHeatmap(cumulativeDiff);
end

%% --- Preprocessing: Grau + Histogrammausgleich ---
function grayImage = preprocessImage(img)
    figure;
    subplot(1, 2, 1);
    imshow(img);
    title('Original');
    if size(img, 3) == 3
        img = rgb2gray(img);
    end
    img = adapthisteq(img);
    grayImage = im2double(img);
    subplot(1, 2, 2);
    imshow(grayImage);
    title('Vorverarbeitet');
end

%% --- Registrierung basierend auf SURF Features ---
function [registered2, validMask] = registerImages(gray1, gray2)
    try
        % BRISK
        % https://de.mathworks.com/help/vision/ug/local-feature-detection-and-extraction.html
        pts1BRISK = detectBRISKFeatures(gray1,MinContrast=0.01);
        pts2BRISK = detectBRISKFeatures(gray2,MinContrast=0.01);

        [f1BRISK, vpts1BRISK] = extractFeatures(gray1, pts1BRISK);
        [f2BRISK, vpts2BRISK] = extractFeatures(gray2, pts2BRISK);
        
        indexPairsBRISK = matchFeatures(f1BRISK, f2BRISK, MatchThreshold=95, MaxRatio=0.8);

        if size(indexPairsBRISK, 1) < 3
            warning('Zu wenige Übereinstimmungen für Registrierung.');
            registered2 = [];
            validMask = [];
            return;clos
        end
        
        matched1BRISK = vpts1BRISK(indexPairsBRISK(:,1));
        matched2BRISK = vpts2BRISK(indexPairsBRISK(:,2));

        pts1 = detectSURFFeatures(gray1, 'MetricThreshold', 1000, 'NumOctaves', 6);
        pts2 = detectSURFFeatures(gray2, 'MetricThreshold', 1000, 'NumOctaves', 6);

        [f1, vpts1] = extractFeatures(gray1, pts1);
        [f2, vpts2] = extractFeatures(gray2, pts2);

        indexPairs = matchFeatures(f1, f2, 'Unique', true);

        if size(indexPairs, 1) < 3
            warning('Zu wenige Übereinstimmungen für Registrierung.');
            registered2 = [];
            validMask = [];
            return;
        end
        
        matched1SURF = vpts1(indexPairs(:,1));
        matched2SURF = vpts2(indexPairs(:,2));

        % Combine SURF and BRISK
        matched1 = [matched1SURF.Location; matched1BRISK.Location];
        matched2 = [matched2SURF.Location; matched2BRISK.Location];
        %% DEBUG: Korrespondenzpunkte anzeigen
        figure('Name', 'Korrespondenzpunkte');
        showMatchedFeatures(gray1, gray2, matched1, matched2, 'montage');
        title(['Gefundene Korrespondenzen: ', num2str(size(indexPairs,1))]);

        tform = estgeotform2d(matched2, matched1, 'similarity');
        outputRef = imref2d(size(gray1));
        registered2 = imwarp(gray2, tform, 'OutputView', outputRef);

        mask = ones(size(gray2));
        warpedMask = imwarp(mask, tform, 'OutputView', outputRef);
        validMask = warpedMask > 0;

    catch ME
        warning(['Registrierung fehlgeschlagen: ', ME.message]);
        registered2 = [];
        validMask = [];
    end
end

%% --- Heatmap der Differenz anzeigen ---
function visualizeDifferenceHeatmap(diffImage)
    figure;
    imagesc(diffImage);
    axis image off;
    colormap jet;
    colorbar;
    title('Differenz-Heatmap');
end
%% --- Natürliche Sortierung der Bilddateien ---
function sorted = sort_nat(filenames)
    expr = '\d{4}';
    years = regexp(filenames, expr, 'match', 'once');
    years = cellfun(@str2double, years);
    [~, idx] = sort(years);
    sorted = filenames(idx);
end